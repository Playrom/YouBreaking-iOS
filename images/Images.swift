//
//  Images.swift
//  YouBreaking
//
//  Created by Giorgio Romano on 02/02/2017.
//  Copyright Â© 2017 Giorgio Romano. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Images : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfArrowUp: UIImage?
        static var arrowUpTargets: [AnyObject]?
        static var imageOfArrowDown: UIImage?
        static var arrowDownTargets: [AnyObject]?
        static var imageOfArrowUpFill: UIImage?
        static var arrowUpFillTargets: [AnyObject]?
        static var imageOfArrowDownFill: UIImage?
        static var arrowDownFillTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawArrowUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 120, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 234.75, y: 117.5))
        polygonPath.addLine(to: CGPoint(x: 5.25, y: 117.5))
        polygonPath.close()
        UIColor.black.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 252.5, y: 116.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 132.5, y: 0))
        polygonPath.addLine(to: CGPoint(x: 247.25, y: 114.75))
        polygonPath.addLine(to: CGPoint(x: 17.75, y: 114.75))
        polygonPath.close()
        UIColor.black.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowUpFill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 120, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 234.75, y: 117.5))
        polygonPath.addLine(to: CGPoint(x: 5.25, y: 117.5))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()
        UIColor.black.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowDownFill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 252.5, y: 116.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 132.5, y: 0))
        polygonPath.addLine(to: CGPoint(x: 247.25, y: 114.75))
        polygonPath.addLine(to: CGPoint(x: 17.75, y: 114.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()
        UIColor.black.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfArrowUp: UIImage {
        if Cache.imageOfArrowUp != nil {
            return Cache.imageOfArrowUp!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowUp()

        Cache.imageOfArrowUp = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowUp!
    }

    public dynamic class var imageOfArrowDown: UIImage {
        if Cache.imageOfArrowDown != nil {
            return Cache.imageOfArrowDown!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowDown()

        Cache.imageOfArrowDown = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDown!
    }

    public dynamic class var imageOfArrowUpFill: UIImage {
        if Cache.imageOfArrowUpFill != nil {
            return Cache.imageOfArrowUpFill!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowUpFill()

        Cache.imageOfArrowUpFill = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowUpFill!
    }

    public dynamic class var imageOfArrowDownFill: UIImage {
        if Cache.imageOfArrowDownFill != nil {
            return Cache.imageOfArrowDownFill!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowDownFill()

        Cache.imageOfArrowDownFill = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDownFill!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var arrowUpTargets: [AnyObject]! {
        get { return Cache.arrowUpTargets }
        set {
            Cache.arrowUpTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowUp)
            }
        }
    }

    @IBOutlet dynamic var arrowDownTargets: [AnyObject]! {
        get { return Cache.arrowDownTargets }
        set {
            Cache.arrowDownTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowDown)
            }
        }
    }

    @IBOutlet dynamic var arrowUpFillTargets: [AnyObject]! {
        get { return Cache.arrowUpFillTargets }
        set {
            Cache.arrowUpFillTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowUpFill)
            }
        }
    }

    @IBOutlet dynamic var arrowDownFillTargets: [AnyObject]! {
        get { return Cache.arrowDownFillTargets }
        set {
            Cache.arrowDownFillTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowDownFill)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
