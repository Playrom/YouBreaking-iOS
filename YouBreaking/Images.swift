//
//  Images.swift
//  YouBreaking
//
//  Created by Giorgio Romano on 14/06/2017.
//  Copyright Â© 2017 Giorgio Romano. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Images : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfArrowup: UIImage?
        static var arrowupTargets: [AnyObject]?
        static var imageOfArrowdown: UIImage?
        static var arrowdownTargets: [AnyObject]?
        static var imageOfArrowupfill: UIImage?
        static var arrowupfillTargets: [AnyObject]?
        static var imageOfArrowdownfill: UIImage?
        static var arrowdownfillTargets: [AnyObject]?
        static var imageOfNo: UIImage?
        static var noTargets: [AnyObject]?
        static var imageOfYes: UIImage?
        static var yesTargets: [AnyObject]?
        static var imageOfCross: UIImage?
        static var crossTargets: [AnyObject]?
        static var imageOfBack: UIImage?
        static var backTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawArrowup(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 120, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 234.75, y: 117.5))
        polygonPath.addLine(to: CGPoint(x: 5.25, y: 117.5))
        polygonPath.close()
        red.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 119.5, y: 29.5))
        bezier3Path.addLine(to: CGPoint(x: 119.5, y: 99.5))
        bezier3Path.move(to: CGPoint(x: 84.5, y: 64.5))
        bezier3Path.addLine(to: CGPoint(x: 154.5, y: 64.5))
        red.setStroke()
        bezier3Path.lineWidth = 5
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowdown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 252.5, y: 116.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 132.5, y: 0))
        polygonPath.addLine(to: CGPoint(x: 247.25, y: 114.75))
        polygonPath.addLine(to: CGPoint(x: 17.75, y: 114.75))
        polygonPath.close()
        red.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()

        context.restoreGState()


        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 85.5, y: 46.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 70))
        red.setStroke()
        bezier3Path.lineWidth = 5
        bezier3Path.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowupfill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 120.5, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 235.25, y: 117.5))
        polygonPath.addLine(to: CGPoint(x: 5.75, y: 117.5))
        polygonPath.close()
        red.setFill()
        polygonPath.fill()
        red.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 120.5, y: 29.5))
        bezierPath.addLine(to: CGPoint(x: 120.5, y: 99.5))
        bezierPath.move(to: CGPoint(x: 85.5, y: 64.5))
        bezierPath.addLine(to: CGPoint(x: 155.5, y: 64.5))
        white.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowdownfill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 253, y: 116)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 132.5, y: 0))
        polygonPath.addLine(to: CGPoint(x: 247.25, y: 114.75))
        polygonPath.addLine(to: CGPoint(x: 17.75, y: 114.75))
        polygonPath.close()
        red.setFill()
        polygonPath.fill()
        red.setStroke()
        polygonPath.lineWidth = 5
        polygonPath.stroke()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 85, y: 46.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 70))
        white.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 5.5, width: 140.5, height: 140.5))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 3
        ovalPath.stroke()


        //// Group
        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 33.5, y: 116.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: 81.5))
        bezier3Path.addCurve(to: CGPoint(x: 81.49, y: 0), controlPoint1: CGPoint(x: 83.37, y: -1.87), controlPoint2: CGPoint(x: 81.49, y: 0))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 33.5, y: 116.5))
        bezierPath.addCurve(to: CGPoint(x: 114.37, y: 35.63), controlPoint1: CGPoint(x: 116.23, y: 33.77), controlPoint2: CGPoint(x: 114.37, y: 35.63))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawYes(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 5.5, width: 140.5, height: 140.5))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 3
        ovalPath.stroke()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 67.5, y: 116.5))
        bezierPath.addCurve(to: CGPoint(x: 114.37, y: 35.63), controlPoint1: CGPoint(x: 115.45, y: 33.77), controlPoint2: CGPoint(x: 114.37, y: 35.63))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()




        //// Group 3
        context.saveGState()
        context.translateBy(x: 84.88, y: 69.62)
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 6, y: 45.88))
        bezier2Path.addCurve(to: CGPoint(x: 46.87, y: 17), controlPoint1: CGPoint(x: 47.81, y: 16.34), controlPoint2: CGPoint(x: 46.87, y: 17))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.stroke()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCross(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Group
        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 8, y: 142)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: 134))
        bezier3Path.addCurve(to: CGPoint(x: 133.99, y: 0.01), controlPoint1: CGPoint(x: 137.07, y: -3.07), controlPoint2: CGPoint(x: 133.99, y: 0.01))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.5, y: 142.5))
        bezierPath.addCurve(to: CGPoint(x: 140.96, y: 9.03), controlPoint1: CGPoint(x: 144.03, y: 5.97), controlPoint2: CGPoint(x: 140.96, y: 9.03))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawBack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 11.48))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 1.5), controlPoint1: CGPoint(x: 16.23, y: 1.27), controlPoint2: CGPoint(x: 16, y: 1.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 16, y: 10.57)
        context.rotate(by: 90 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0, y: 9.45))
        bezier2Path.addCurve(to: CGPoint(x: 9.93, y: 0), controlPoint1: CGPoint(x: 10.16, y: -0.22), controlPoint2: CGPoint(x: 9.93, y: 0))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawHeartBig(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 44.45, y: 6.07))
        bezierPath.addLine(to: CGPoint(x: 44.45, y: 6.06))
        bezierPath.addCurve(to: CGPoint(x: 27.33, y: 6.06), controlPoint1: CGPoint(x: 39.73, y: 0.65), controlPoint2: CGPoint(x: 32.06, y: 0.65))
        bezierPath.addLine(to: CGPoint(x: 25, y: 8.74))
        bezierPath.addLine(to: CGPoint(x: 22.67, y: 6.07))
        bezierPath.addLine(to: CGPoint(x: 22.67, y: 6.07))
        bezierPath.addCurve(to: CGPoint(x: 5.55, y: 6.07), controlPoint1: CGPoint(x: 17.94, y: 0.65), controlPoint2: CGPoint(x: 10.27, y: 0.65))
        bezierPath.addCurve(to: CGPoint(x: 5.55, y: 25.7), controlPoint1: CGPoint(x: 0.82, y: 11.49), controlPoint2: CGPoint(x: 0.82, y: 20.28))
        bezierPath.addLine(to: CGPoint(x: 7.88, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 25, y: 48))
        bezierPath.addLine(to: CGPoint(x: 42.12, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 44.45, y: 25.7))
        bezierPath.addLine(to: CGPoint(x: 44.46, y: 25.69))
        bezierPath.addCurve(to: CGPoint(x: 44.45, y: 6.07), controlPoint1: CGPoint(x: 49.18, y: 20.27), controlPoint2: CGPoint(x: 49.18, y: 11.49))
        bezierPath.close()
        red.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawHeartFillBig(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 44.45, y: 6.07))
        bezierPath.addLine(to: CGPoint(x: 44.45, y: 6.06))
        bezierPath.addCurve(to: CGPoint(x: 27.33, y: 6.06), controlPoint1: CGPoint(x: 39.73, y: 0.65), controlPoint2: CGPoint(x: 32.06, y: 0.65))
        bezierPath.addLine(to: CGPoint(x: 25, y: 8.74))
        bezierPath.addLine(to: CGPoint(x: 22.67, y: 6.07))
        bezierPath.addLine(to: CGPoint(x: 22.67, y: 6.07))
        bezierPath.addCurve(to: CGPoint(x: 5.55, y: 6.07), controlPoint1: CGPoint(x: 17.94, y: 0.65), controlPoint2: CGPoint(x: 10.27, y: 0.65))
        bezierPath.addCurve(to: CGPoint(x: 5.55, y: 25.7), controlPoint1: CGPoint(x: 0.82, y: 11.49), controlPoint2: CGPoint(x: 0.82, y: 20.28))
        bezierPath.addLine(to: CGPoint(x: 7.88, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 25, y: 48))
        bezierPath.addLine(to: CGPoint(x: 42.12, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 44.45, y: 25.7))
        bezierPath.addLine(to: CGPoint(x: 44.46, y: 25.69))
        bezierPath.addCurve(to: CGPoint(x: 44.45, y: 6.07), controlPoint1: CGPoint(x: 49.18, y: 20.27), controlPoint2: CGPoint(x: 49.18, y: 11.49))
        bezierPath.close()
        red.setFill()
        bezierPath.fill()
        red.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawShareBig(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// share.svg Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7, y: 25))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 44.2))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 44.2))
        bezier2Path.addCurve(to: CGPoint(x: 11.5, y: 49), controlPoint1: CGPoint(x: 7, y: 46.85), controlPoint2: CGPoint(x: 9.01, y: 49))
        bezier2Path.addLine(to: CGPoint(x: 38.5, y: 49))
        bezier2Path.addLine(to: CGPoint(x: 38.5, y: 49))
        bezier2Path.addCurve(to: CGPoint(x: 43, y: 44.2), controlPoint1: CGPoint(x: 40.99, y: 49), controlPoint2: CGPoint(x: 43, y: 46.85))
        bezier2Path.addLine(to: CGPoint(x: 43, y: 25))
        red.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 34, y: 10.6))
        bezier3Path.addLine(to: CGPoint(x: 25, y: 1))
        bezier3Path.addLine(to: CGPoint(x: 16, y: 10.6))
        red.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 25, y: 1))
        bezier4Path.addLine(to: CGPoint(x: 25, y: 32.2))
        red.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawHeartMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 31.46, y: 3.92))
        bezierPath.addLine(to: CGPoint(x: 31.45, y: 3.92))
        bezierPath.addCurve(to: CGPoint(x: 19.17, y: 3.92), controlPoint1: CGPoint(x: 28.06, y: 0.03), controlPoint2: CGPoint(x: 22.57, y: 0.03))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 5.84))
        bezierPath.addLine(to: CGPoint(x: 15.83, y: 3.92))
        bezierPath.addLine(to: CGPoint(x: 15.83, y: 3.92))
        bezierPath.addCurve(to: CGPoint(x: 3.54, y: 3.92), controlPoint1: CGPoint(x: 12.43, y: 0.03), controlPoint2: CGPoint(x: 6.94, y: 0.03))
        bezierPath.addCurve(to: CGPoint(x: 3.54, y: 18), controlPoint1: CGPoint(x: 0.15, y: 7.81), controlPoint2: CGPoint(x: 0.15, y: 14.11))
        bezierPath.addLine(to: CGPoint(x: 5.22, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 34))
        bezierPath.addLine(to: CGPoint(x: 29.78, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 31.46, y: 18))
        bezierPath.addLine(to: CGPoint(x: 31.46, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 31.46, y: 3.92), controlPoint1: CGPoint(x: 34.85, y: 14.11), controlPoint2: CGPoint(x: 34.85, y: 7.81))
        bezierPath.close()
        red.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawHeartFillMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 31.46, y: 3.92))
        bezierPath.addLine(to: CGPoint(x: 31.45, y: 3.92))
        bezierPath.addCurve(to: CGPoint(x: 19.17, y: 3.92), controlPoint1: CGPoint(x: 28.06, y: 0.03), controlPoint2: CGPoint(x: 22.57, y: 0.03))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 5.84))
        bezierPath.addLine(to: CGPoint(x: 15.83, y: 3.92))
        bezierPath.addLine(to: CGPoint(x: 15.83, y: 3.92))
        bezierPath.addCurve(to: CGPoint(x: 3.54, y: 3.92), controlPoint1: CGPoint(x: 12.43, y: 0.03), controlPoint2: CGPoint(x: 6.94, y: 0.03))
        bezierPath.addCurve(to: CGPoint(x: 3.54, y: 18), controlPoint1: CGPoint(x: 0.15, y: 7.81), controlPoint2: CGPoint(x: 0.15, y: 14.11))
        bezierPath.addLine(to: CGPoint(x: 5.22, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 34))
        bezierPath.addLine(to: CGPoint(x: 29.78, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 31.46, y: 18))
        bezierPath.addLine(to: CGPoint(x: 31.46, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 31.46, y: 3.92), controlPoint1: CGPoint(x: 34.85, y: 14.11), controlPoint2: CGPoint(x: 34.85, y: 7.81))
        bezierPath.close()
        red.setFill()
        bezierPath.fill()
        red.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawShareMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// share.svg Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4, y: 17.5))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 30.7))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 30.7))
        bezier2Path.addCurve(to: CGPoint(x: 7.38, y: 34), controlPoint1: CGPoint(x: 4, y: 32.52), controlPoint2: CGPoint(x: 5.51, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 27.62, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 27.62, y: 34))
        bezier2Path.addCurve(to: CGPoint(x: 31, y: 30.7), controlPoint1: CGPoint(x: 29.49, y: 34), controlPoint2: CGPoint(x: 31, y: 32.52))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 17.5))
        red.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 24.25, y: 7.6))
        bezier3Path.addLine(to: CGPoint(x: 17.5, y: 1))
        bezier3Path.addLine(to: CGPoint(x: 10.75, y: 7.6))
        red.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 17.5, y: 1))
        bezier4Path.addLine(to: CGPoint(x: 17.5, y: 22.45))
        red.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawShare(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 25)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// share.svg Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4, y: 12.5))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 21.7))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 21.7))
        bezier2Path.addCurve(to: CGPoint(x: 6.12, y: 24), controlPoint1: CGPoint(x: 4, y: 22.97), controlPoint2: CGPoint(x: 4.95, y: 24))
        bezier2Path.addLine(to: CGPoint(x: 18.88, y: 24))
        bezier2Path.addLine(to: CGPoint(x: 18.88, y: 24))
        bezier2Path.addCurve(to: CGPoint(x: 21, y: 21.7), controlPoint1: CGPoint(x: 20.05, y: 24), controlPoint2: CGPoint(x: 21, y: 22.97))
        bezier2Path.addLine(to: CGPoint(x: 21, y: 12.5))
        red.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 16.75, y: 5.6))
        bezier3Path.addLine(to: CGPoint(x: 12.5, y: 1))
        bezier3Path.addLine(to: CGPoint(x: 8.25, y: 5.6))
        red.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 12.5, y: 1))
        bezier4Path.addLine(to: CGPoint(x: 12.5, y: 15.95))
        red.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawHeartFill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 25)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.23, y: 3.03))
        bezierPath.addLine(to: CGPoint(x: 22.23, y: 3.03))
        bezierPath.addCurve(to: CGPoint(x: 13.67, y: 3.03), controlPoint1: CGPoint(x: 19.86, y: 0.32), controlPoint2: CGPoint(x: 16.03, y: 0.32))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 4.37))
        bezierPath.addLine(to: CGPoint(x: 11.33, y: 3.03))
        bezierPath.addLine(to: CGPoint(x: 11.33, y: 3.03))
        bezierPath.addCurve(to: CGPoint(x: 2.77, y: 3.03), controlPoint1: CGPoint(x: 8.97, y: 0.32), controlPoint2: CGPoint(x: 5.14, y: 0.32))
        bezierPath.addCurve(to: CGPoint(x: 2.77, y: 12.85), controlPoint1: CGPoint(x: 0.41, y: 5.74), controlPoint2: CGPoint(x: 0.41, y: 10.14))
        bezierPath.addLine(to: CGPoint(x: 3.94, y: 14.19))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 24))
        bezierPath.addLine(to: CGPoint(x: 21.06, y: 14.19))
        bezierPath.addLine(to: CGPoint(x: 22.23, y: 12.85))
        bezierPath.addLine(to: CGPoint(x: 22.23, y: 12.85))
        bezierPath.addCurve(to: CGPoint(x: 22.23, y: 3.03), controlPoint1: CGPoint(x: 24.59, y: 10.14), controlPoint2: CGPoint(x: 24.59, y: 5.74))
        bezierPath.close()
        red.setFill()
        bezierPath.fill()
        red.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 25)


        //// Color Declarations
        let red = UIColor(red: 0.839, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.23, y: 3.03))
        bezierPath.addLine(to: CGPoint(x: 22.23, y: 3.03))
        bezierPath.addCurve(to: CGPoint(x: 13.67, y: 3.03), controlPoint1: CGPoint(x: 19.86, y: 0.32), controlPoint2: CGPoint(x: 16.03, y: 0.32))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 4.37))
        bezierPath.addLine(to: CGPoint(x: 11.33, y: 3.03))
        bezierPath.addLine(to: CGPoint(x: 11.33, y: 3.03))
        bezierPath.addCurve(to: CGPoint(x: 2.77, y: 3.03), controlPoint1: CGPoint(x: 8.97, y: 0.32), controlPoint2: CGPoint(x: 5.14, y: 0.32))
        bezierPath.addCurve(to: CGPoint(x: 2.77, y: 12.85), controlPoint1: CGPoint(x: 0.41, y: 5.74), controlPoint2: CGPoint(x: 0.41, y: 10.14))
        bezierPath.addLine(to: CGPoint(x: 3.94, y: 14.19))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 24))
        bezierPath.addLine(to: CGPoint(x: 21.06, y: 14.19))
        bezierPath.addLine(to: CGPoint(x: 22.23, y: 12.85))
        bezierPath.addLine(to: CGPoint(x: 22.23, y: 12.85))
        bezierPath.addCurve(to: CGPoint(x: 22.23, y: 3.03), controlPoint1: CGPoint(x: 24.59, y: 10.14), controlPoint2: CGPoint(x: 24.59, y: 5.74))
        bezierPath.close()
        red.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfArrowup: UIImage {
        if Cache.imageOfArrowup != nil {
            return Cache.imageOfArrowup!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowup()

        Cache.imageOfArrowup = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowup!
    }

    public dynamic class var imageOfArrowdown: UIImage {
        if Cache.imageOfArrowdown != nil {
            return Cache.imageOfArrowdown!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowdown()

        Cache.imageOfArrowdown = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowdown!
    }

    public dynamic class var imageOfArrowupfill: UIImage {
        if Cache.imageOfArrowupfill != nil {
            return Cache.imageOfArrowupfill!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowupfill()

        Cache.imageOfArrowupfill = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowupfill!
    }

    public dynamic class var imageOfArrowdownfill: UIImage {
        if Cache.imageOfArrowdownfill != nil {
            return Cache.imageOfArrowdownfill!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            Images.drawArrowdownfill()

        Cache.imageOfArrowdownfill = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowdownfill!
    }

    public dynamic class var imageOfNo: UIImage {
        if Cache.imageOfNo != nil {
            return Cache.imageOfNo!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            Images.drawNo()

        Cache.imageOfNo = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNo!
    }

    public dynamic class var imageOfYes: UIImage {
        if Cache.imageOfYes != nil {
            return Cache.imageOfYes!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            Images.drawYes()

        Cache.imageOfYes = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfYes!
    }

    public dynamic class var imageOfCross: UIImage {
        if Cache.imageOfCross != nil {
            return Cache.imageOfCross!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            Images.drawCross()

        Cache.imageOfCross = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCross!
    }

    public dynamic class var imageOfBack: UIImage {
        if Cache.imageOfBack != nil {
            return Cache.imageOfBack!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            Images.drawBack()

        Cache.imageOfBack = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfBack!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var arrowupTargets: [AnyObject]! {
        get { return Cache.arrowupTargets }
        set {
            Cache.arrowupTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowup)
            }
        }
    }

    @IBOutlet dynamic var arrowdownTargets: [AnyObject]! {
        get { return Cache.arrowdownTargets }
        set {
            Cache.arrowdownTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowdown)
            }
        }
    }

    @IBOutlet dynamic var arrowupfillTargets: [AnyObject]! {
        get { return Cache.arrowupfillTargets }
        set {
            Cache.arrowupfillTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowupfill)
            }
        }
    }

    @IBOutlet dynamic var arrowdownfillTargets: [AnyObject]! {
        get { return Cache.arrowdownfillTargets }
        set {
            Cache.arrowdownfillTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfArrowdownfill)
            }
        }
    }

    @IBOutlet dynamic var noTargets: [AnyObject]! {
        get { return Cache.noTargets }
        set {
            Cache.noTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfNo)
            }
        }
    }

    @IBOutlet dynamic var yesTargets: [AnyObject]! {
        get { return Cache.yesTargets }
        set {
            Cache.yesTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfYes)
            }
        }
    }

    @IBOutlet dynamic var crossTargets: [AnyObject]! {
        get { return Cache.crossTargets }
        set {
            Cache.crossTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfCross)
            }
        }
    }

    @IBOutlet dynamic var backTargets: [AnyObject]! {
        get { return Cache.backTargets }
        set {
            Cache.backTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Images.imageOfBack)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
